name: build
on: [push, pull_request]
jobs:
  build:
    name: "${{ matrix.id }}"
    runs-on: ubuntu-20.04
    container: ${{ matrix.container }}
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        include:
          - { id: "check-debian-stable-amd64-gcc",       task: "check",     configure-args: "--enable-ja-rule --enable-e133 --enable-gcov",                         container: "debian:stable", compiler: { CC: "/usr/bin/gcc",   CXX: "/usr/bin/g++",     pkg: "gcc g++" } }
          - { id: "check-debian-stable-amd64-clang",     task: "check",     configure-args: "--enable-ja-rule --enable-e133 --enable-gcov",                         container: "debian:stable", compiler: { CC: "/usr/bin/clang", CXX: "/usr/bin/clang++", pkg: "clang"   } }
          - { id: "distcheck-debian-stable-amd64-gcc",   task: "distcheck", configure-args: "--enable-ja-rule --enable-e133 --enable-rdm-tests --enable-java-libs", container: "debian:stable", compiler: { CC: "/usr/bin/gcc",   CXX: "/usr/bin/g++",     pkg: "gcc g++" } }
          - { id: "distcheck-debian-stable-amd64-clang", task: "distcheck", configure-args: "--enable-ja-rule --enable-e133 --enable-rdm-tests --enable-java-libs", container: "debian:stable", compiler: { CC: "/usr/bin/clang", CXX: "/usr/bin/clang++", pkg: "clang"   } }
    env:
      CC: "${{ matrix.compiler.CC }}"
      CXX: "${{ matrix.compiler.CXX }}"
    steps:
      - name: Get number of CPU cores
        run: echo "NUM_CPU_CORES=$(grep -c processor /proc/cpuinfo)" >> $GITHUB_OUTPUT
      - name: Update package database
        run: apt-get update -y
      # See comments beginning at
      # https://github.com/actions/runner/issues/763#issuecomment-1435474884
      # Without Git, actions/checkout@v3 will resort to REST and will not
      # create a .git folder or .git.config. The Problem Matcher looks for
      # .git/config to find where the root of the repo is, so it must be
      # present.
      - name: Install Git
        run: apt-get -y install git
      - uses: actions/checkout@v3
      - name: Install build tools
        shell: bash
        run: |
          apt-get -y install adduser sudo pkg-config libtool autoconf \
            automake g++ bison flex make bash-completion dh-autoreconf \
            debhelper devscripts wget python3-pip
      - name: Install build dependencies
        shell: bash
        run: |
          apt-get -y install libcppunit-dev uuid-dev libncurses5-dev \
            libmicrohttpd-dev protobuf-compiler python3-protobuf \
            libprotobuf-dev libprotoc-dev zlib1g-dev libftdi-dev \
            libusb-1.0-0-dev liblo-dev libavahi-client-dev python3-numpy \
            default-jdk-headless maven
      - name: Install compiler
        shell: bash
        run: apt-get -y install ${{ matrix.compiler.pkg }}
      - name: Set up build user # CredentialsTest cannot run as root
        run: |
          adduser --disabled-password --gecos "" builduser
          chown -R builduser:builduser .
          chown builduser:builduser ..
      - name: Autoreconf
        run: sudo -u builduser autoreconf -i
      - name: Set configure arguments
        run: |
          echo "GH_OLA_CONFIGURE_ARGS=${{ matrix.configure-args }}" >> $GITHUB_ENV
      - name: Set additional Linux configure arguments
        if: runner.os == 'Linux'
        # Silence all deprecated declarations on Linux due to auto_ptr making the build log too long
        run: |
          echo "GH_OLA_CONFIGURE_ARGS=$GH_OLA_CONFIGURE_ARGS CPPFLAGS=-Wno-deprecated-declarations" >> $GITHUB_ENV
      - name: Print configure command
        run: echo "./configure $GH_OLA_CONFIGURE_ARGS"
      - name: Configure
        run: sudo -u builduser ./configure $GH_OLA_CONFIGURE_ARGS
      - name: ${{ matrix.task }}
        # TODO(Perry): Parallelization causes GH Actions to hang -j${{ steps.num-cpu-cores.outputs.NUM_CPU_CORES }}
        run: sudo -u builduser make ${{ matrix.task }} -j1 VERBOSE=1
      - name: Display structure of the built files
        if: always() && env.ACTIONS_STEP_DEBUG == 'true'
        run: ls -alR
      - name: Archive artifacts to speed up slow GH Actions upload/download
        if: always()
        shell: bash
        # If the file does not exist when tar excludes it, then it will not
        # actually exclude it, so it must first be touched
        run: |
          touch ola-${{ matrix.id }}-source-tree.tar.gz
          tar --exclude=ola-${{ matrix.id }}-source-tree.tar.gz -cvzf ola-${{ matrix.id }}-source-tree.tar.gz .
      - name: SHA256 artifact archives
        if: always()
        run: sha256sum ola-*.tar.gz
      - name: Upload source tree artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ola-${{ matrix.id }}-source-tree
          path: ola-${{ matrix.id }}-source-tree.tar.gz
      - name: Upload built artifact
        uses: actions/upload-artifact@v3
        with:
          name: ola-${{ matrix.id }}
          path: |
            ola-*.tar.gz
            !ola-${{ matrix.id }}-source-tree.tar.gz
  verify-trees:
    name: 'Verify trees for ${{ matrix.id }}'
    needs: build
    if: "always()" # Run if some builds fail but ensure they all complete first
    container: debian:stable
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { id: "distcheck-debian-stable-amd64-gcc"   }
          - { id: "distcheck-debian-stable-amd64-clang" }
    steps:
      - uses: actions/checkout@master
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ola-${{ matrix.id }}-source-tree
          path: built
      - name: Display structure of artifact files
        if: always() && env.ACTIONS_STEP_DEBUG == 'true'
        run: ls -alR
        working-directory: built
      - name: Update package database
        run: apt-get update -y
      - name: Install dependencies to verify trees
        run: apt-get install -y python-is-python3
      - name: Find dist build tarball
        run: |
          echo "GH_OLA_VERIFY_TREES_TARBALL=$(ls --time=birth ola*.tar.gz| head -1)" >> $GITHUB_ENV
        working-directory: built
      - name: Print dist build tarball name
        run: echo "$GH_OLA_VERIFY_TREES_TARBALL"
        working-directory: built
      - name: Extract dist build
        run: tar -zxvf $GH_OLA_VERIFY_TREES_TARBALL
        working-directory: built
      - name: Verify trees
        shell: bash
        run: ./scripts/verify_trees.py ./ $(echo $GH_OLA_VERIFY_TREES_TARBALL | sed 's/.tar.gz$//')
        working-directory: built
